def py_f2611198c417e887(**kwargs):
    url = "https://pokeapi.co/api/v2/pokemon/?offset=30&limit=10"
    label = ""
    headers = {"cc":"header"}
    params = {"ke":"wewq","erwe":"weq"}
    text = ""
    request_type = "get"
    request_body_type = "multipart/form-data"
    response_type = "mapping"
    response_handle = {"error_msg":"error","parse":[{"key":"code","value":"$.count"}],"text":"receive: ${code}"}
    default_error_msg = "failed to Request page"

    import requests
    import json
    import jsonpath
    from llmChatbot.event import BotUtter, SetSlot

    def request(url, params):
        response = None
        try:
            if request_body_type == "application/json":
                response = requests.request(request_type, url, data=json.dumps(params), headers=headers)
            else:
                response = requests.request(request_type, url, data=params, headers=headers)
        except Exception as e:
            print("Fail to get response from webhook. ", e)
        return response

    def __interpolator_text(response, states):
        import re
        try:
            text = re.sub(r"\${([^\n{}]+?)}", r"{0[\1]}", response)
            text = text.format(states)
            if "0[" in text:
                # regex replaced tag but format did not replace
                # likely cause would be that tag name was enclosed
                # in double curly and format func simply escaped it.
                # we don't want to return {0[SLOTNAME]} thus
                # restoring original value with { being escaped.
                return response.format({})
            return text
        except Exception as e:
            print("cannot find states", e)
            return response

    def parse(json_dict, value):
        return jsonpath.jsonpath(json_dict, value)

    if request_body_type == "text/plain":
        text = __interpolator_text(text, kwargs)

    url = __interpolator_text(url, kwargs)

    for key, value in params.items():
        params[key] = __interpolator_text(value, kwargs)

    if request_body_type == "text/plain":
        response = request(url, text)
    else:
        response = request(url, params)
    result = []
    # 处理response
    if response is None or (response is not None and response.status_code >= 400):
        if response_handle is not None:
            result.append(BotUtter(response_handle.get("error_msg")))
        else:
            result.append(BotUtter(default_error_msg))


    if response_type == "direct":
        result.append(BotUtter(response.text))
        return result

    if response_type == "not":
        return []

    if response_handle is not None:
        if response is not None and response.status_code == 200:
            text = response_handle.get("text")
            tmp_slots = kwargs
            for item in response_handle.get("parse"):
                key = item.get("key")
                value = item.get("value")
                mapping = parse(response.json(), value)
                if not mapping:
                    result.append(BotUtter(response_handle.get("error_msg")))
                    break
                if len(mapping) == 0:
                    continue
                result.append(SetSlot(key, mapping[0] if len(mapping) == 1 else mapping))
                tmp_slots[key] = mapping[0] if len(mapping) == 1 else mapping
            text = __interpolator_text(text, tmp_slots)
            result.append(BotUtter(text))

        return result